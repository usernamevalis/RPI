Raspberry pi troubeshootin

1. remote host identification changed
	
	rm -f ~/.ssh/known_hosts
	removes known hosts from ssh file

2. configure i2c

	A

	sudo nano /etc/modprobe.d/raspi-blacklist.conf . 
	In this file, there is a comment, and two lines. Add a hash before the I2C line, to comment it out.

	Original:

	# blacklist spi and i2c by default (many users don't need them)

	blacklist spi-bcm2708
	blacklist i2c-bcm2708

	Convert to this:

	# blacklist spi and i2c by default (many users don't need them)

	blacklist spi-bcm2708
	#blacklist i2c-bcm2708

	B

	The next thing to do is add the I2C module to the kernel. Run the command sudo nano /etc/modules .You should see the following file:

	# /etc/modules: kernel modules to load at boot time.
	#
	# This file contains the names of kernel modules that should be loaded
	# at boot time, one per line. Lines beginning with "#" are ignored.
	# Parameters can be specified after the module name.

	snd-bcm2835

	This should have the line i2c-dev added to the end.

	Final file:

	# /etc/modules: kernel modules to load at boot time.
	#
	# This file contains the names of kernel modules that should be loaded
	# at boot time, one per line. Lines beginning with "#" are ignored.
	# Parameters can be specified after the module name.

	snd-bcm2835
	i2c-dev

	C

	There are a few packages that will need installing to use I2C. The first command to run is 
	sudo apt-get install i2c-tools
	If this fails, try running 
	sudo apt-get update 
	and try again

	The other package needed can be installed by running 
	sudo apt-get install python-smbus.

	To configure the software, we will add the Pi user to the I2C access group, by running the command 
	sudo adduser pi i2c.
	Now run 
	sudo reboot to reboot
	, and test the new software.

3. Checking for any devices on th i2c bus

	i2cdetect -y 0 

	or 

	i2cdetect -y 1

	aswell  as
	Check dmesg | grep i2c

	on new OS there is kernel support for the Wolfram audio card which takes up two i2c addresses. to remove this (you dont need it unless you use the audio card) just blacklist the modules. 

	Got to
	and add these to the blacklist
	blacklist snd_soc_wm8804
	blacklist snd_soc_pcm512s

	0x1b will remain but thats fine, shouldnt intefer


4. wget errors about certificates

	wget insertUrl --no-check-certificate

5. list all the currently running processes 

	ps -ef

kill a process

	sudo kill theProcessID

search for a certain process
	
	ps axg | grep partOfNameOfProcess

6. sound issues

	sudo apt-get install alsa-utils
 	sudo modprobe snd_bcm2835
 	sudo aplay /usr/share/sounds/alsa/Front_Center.wav

7. convert av files

	avconv -i inputFile outputFile

8. play audio

	aplay inputFile

9. pifm commands

	sudo ./pifm left_right.wav 103.3 22050 stereo

	# Example command lines
	# play an MP3
	ffmpeg -i input.mp3 -f s16le -ar 22.05k -ac 1 - | sudo ./pifm -106.0

	# Broadcast from a usb microphone (see arecord manual page for config)
	arecord -d0 -c2 -f S16_LE -r 22050 -twav -Dplughw:1,0 copy | sudo ./pifm -106.0

10. copy files over ssh

	# copy from local machine to remote machine
	scp localfile user@host:/path/to/whereyouwant/thefile

	## copy from remote machine to local machine
	scp user@host:/path/to/remotefile localfile

11. check for attached usb devices

	ls /dev/tty*

	arduino normally something like dev/ttyACM0

12. add location to system path variable (works on mac, i assume it will on linux)

	echo 'export PATH=$PATH:/absolute/path/to/directory' >> ~/.bash_profile 

13. manually set date on rpi

	sudo date -s "Jul 5 08:10 2014"

14. crontab

	crontab -l //shows the content of the crontab
	crontab -e //opens up editor to edit the crontab and add/remove jobs

	if you ever get this error when trying to edit crontab with 'crontab -e'
    
    "/tmp/crontab.gfM9rg: Permission denied
    Creation of temporary crontab file failed - aborting"

    then run this
	sudo chmod 1777 /tmp

15. Edit Ntp servers used for time and date settings

	sudo nano /etc/ntp.conf

16. restart Ntp servers

	sudo /etc/init.d/ntp restart

17. Edit time zone

	sudo nano /etc/timezone

18. Internet not working, sharing internet from mac not working

	add this nameserver to the /etc/resolv.conf file

	"nameserver 8.8.8.8"

19. MJPG streamer correct link

	svn co https://svn.code.sf.net/p/mjpg-streamer/code/mjpg-streamer/ mjpg-streamer
	 

20. Find Raspberry Pi's IP usin nmap

	sudo nmap -sn 172.16.21.0/24

	the Ip address needs to be your subnet range, this command scans all ip's within this range from 0-255.
	Sudo needs to be used, this way the command returns the mac addresses which it can identify as a raspberry pi's

21. Installing Node-red

    NBNBNBNBNBNBNB!!!!!!!

    node version 10.28+ do not work on rpi!! so install node -version 10.28 using nvm
    check this site http://sanjo-webdesign.de/2014/08/install-node-js-on-raspberry-pi/

    #!/bin/bash
 
	# 1. Connect to your Raspberry Pi via SSH
	#    or open a terminal.
	 
	# 2. Make sure you have a .bash_profile file:
	touch ~/.bash_profile
	 
	# 3. Install nvm:
	curl https://raw.githubusercontent.com/creationix/nvm/v0.13.1/install.sh | bash
	 
	# 4. Update your shell:
	source ~/.bash_profile
	 
	# 5. Install the latest version of Node.js:
	nvm install 0.10.28
	# Version 0.10.29 and 0.10.30 seems
	# not to work on Raspberry Pi (see [#8062](https://github.com/joyent/node/issues/8062)).
	 
	# 6. Let your shell use
	#    the latest version of Node.js by default:
	nvm alias default 0.10

    the other i did when i finally got this to work, although i ahvent tested it by itself. Is
    I downloaded node red on my laptop and copied over to the RPi using scp. I read somewhere that not all the files download when pullin grom git on RPI - i dunno sounds suspect but i havent tried to replicate.

	enter node-red folder
	cd node-red

	install node modules using npm package manager. nb i had alot of problems when i didnt specify the --production flag
	npm install --production

	useful libraries/nodes. Sometimes i had to install them one by one not as a single command
	sudo npm install ntwitter oauth sentiment wordpos xml2js firmata fs.notify serialport feedparser pushbullet irc simple-xmpp redis mongodb

    to run node red. This limits memeory usage and keeps pi from randonly crashing
    node --max-old-space-size=128 red.js

22. Running NODE_RED on start up

	sudo nano /etc/init.d/node_red

	copy this into the file, and edit the “cd node-red” to point to your installation of node-red

	#! /bin/sh
# Starts and stops Node-RED
# /etc/init.d/node-red
### BEGIN INIT INFO
# Provides:     node-red
# Required-Start:       $syslog
# Required-Stop:        $syslog
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    Node-RED initialisation
### END INIT INFO
# Can be downloaded and installed in one go by using this command
# sudo wget -O /tmp/download https://gist.github.com/bigmonkeyboy/9962293/download && sudo tar -zxf /tmp/download --strip-components 1 -C /etc/init.d && sudo update-rc.d node-red defaults
# Note: this runs as the user called pi
 
PIDFILE=/var/run/nodered.pid
 
#Load up node red when called
case "$1" in
 
start)
        echo "Starting Node-Red.."
        su -l pi -c "cd node-red; screen -dmS red node --max-old-space-size=128 red.’s”
        echo `screen -ls red | sed -n '2p' | cut -f1 -d.` > $PIDFILE
# or
        #nohup node --max-old-space-size=128 red.js > /var/log/node-red.log &
        #echo $! > $PIDFILE
;;
 
stop)
        echo "Stopping Node-Red.."
        su -l pi -c "screen -S red -X quit"
# or
        #kill `cat $PIDFILE`
        rm -f $PIDFILE
;;
 
restart)
        echo "Restarting Node-Red.."
        $0 stop
        $0 start
;;
*)
        echo "Usage: $0 {start|stop|restart}"
        exit 1
esac

	then make it executable
	sudo chmod +x /etc/init.d/node_red

	make it run at boot
	sudo update-rc.d node_red defaults

	to stop it from auto running at reboot
	update-rc.d -f node_red remove

	and control it with these commands
	sudo service node_red start
	sudo service node_red stop
	sudo service node_red restart


23. NPM issues relating to gyp - this is generally rooted to using th latest node version which doesnt work on RPI - use NVM to install node

    remove the tmp folder created by npm in root
    rm -fr /root/tmp

    then install module with
    sudo npm install moduleName --unsafe-perm
    
        or

    sudo npm install moduleName --no-bin-link --unsafe-perm

24. Give RPI a static IP

25. burn wheezy to disk

	diskutil list

	diskutil unmountDisk /dev/<disk# from diskutil>

	sudo dd bs=1m if=2014-09-09-wheezy-raspbian.img of=/dev/disk#

26. run script at boot

	http://www.stuffaboutcode.com/2012/06/raspberry-pi-run-program-at-start-up.html

27. Access OS on sd card from OSX
	See site, it has relavent links to installers: http://pi.gbaman.info/?p=328

	This isnt 100% bug free but works to when you want to access files on the os from you mac

	install Fuse for osx
	when running the installer you must select all 3 options when you get to the  'Installation type' menu (including MacFuse compatability layer)

	once complete install Fuse-ext2 driver then resart you computer and that should work

28. Find and kill a process

	finds all running python programs
    ps aux | grep -i python

    killall insertProgramName

   OR use PID
   finds process ID (pid) of all running python programs
   ps -ef | grep python

   kills process using PID
   kill <PID>

29. UDEV rule to run script when usb is inserted
	nb make script executable, if having probelms place it in /usr/local/bin
	
	Add this to file in the /etc/udev/rules.d/99-myRules.rules
	ACTION=="add", KERNEL=="sd[a-z]1", RUN+="/usr/local/bin/test.sh"

	create bash script test.sh in the right directory containing:
	#!/bin/bash
	echo "test" >> /tmp/test.txt


	dont forget to make the script executable with 
	sudo chmod +x scriptname

	if all is working the /tmp/test.txt file should contain "test". NB access it with sudo  or it might say it does not exist

	reload udev rules right away
	sudo /etc/init.d/udev restart
	or
    sudo udevadm control --reload-rules

    see what udev rules are being run
	sudo udevadm test /dev/sda1

	udev rules need to run very quickly, long scripts will get cancelled. 
	to circumvent this you can use 'at'. install it with sudo apt-get install at
	to use it simply pipe the command to 'at' and set to execute 'now'
	eg:
	sudo python script.py | at now

30 writing a bash script

	all bash scripts start with a shebang
	#!/bin/bash

	add commands like you would write them in terminal ie.
	echo "hello"

	to exit script when don running add to the bottom of the script
	exit 0

    make the script executable by running, "+x" makes it executable and accesiable via a program
    sudo chmod +x scriptName

31. run script at insertion of USB

	create udev rule

	sudo nano /etc/udev/rules.d/81-test.rules  (there are rules to the numbers you use but 81 should be fine for most)
	(add this to the above file and save)
	ACTION=="add", KERNEL=="sd[a-z]1", RUN+="/home/pi/testPy.sh"

	this runs the file /home/pi/testPy.sh whenever a flashdisk is inserted

	create the bash script

	sudo nano testPy.sh
	(add this to file)
	#!/bin/bash
	echo "test" >> /tmp/test.txt
	/home/pi/test.py | /usr/bin/at now

	this adds "fuck" to a file at /tmp/test.txt, usefule for debugging, and then runs test.py. do to limited time avaialble
	to runs script from udev you need to pass off the python or else it will stop halfway through execution. This is don using 'at', at 
	is kind of like cron, the shell script calls the python script and passes it to 'at' to be exectued in peace and at its own pace

	Make the shell script executble
	sudo chmod u+x testPy.sh

	Whenever a usb is inserted the udev rule will call the shell script etc. to double check, look at the contents of /tmp/test.txt you should see 'test'. See below for a helpful debugging script to place inside the python script

	sudo nano test.py
	(add this code and make executable)
	#!/usr/bin/python2
	import os

	if __name__ == "__main__":
    f = file("/tmp/hello.txt", "a")
    f.write(str(os.environ))
    f.close()

    sudo nano chmod u+x test.py

    when the usb is inserted you should see 'test' added to /tmp/test.txt, as well as this sort of thing added to /tmp/hello.txt
    "{'ID_VENDOR_ID': '058f', 'ID_PART_TABLE_TYPE': 'dos', 'ID_USB_INTERFACE_NUM': '00', 'ID_PART_ENTRY_DISK': '8:0', 'ID_REVISION': '8.07', 'UDISKS_PARTITION_SCH"...etc

32. Auto mount usb udev

create a new udev rule called /etc/udev/rules.d/11-media-by-label-auto-mount.rules

KERNEL!="sd[a-z][0-9]", GOTO="media_by_label_auto_mount_end"  
# Import FS infos  
IMPORT{program}="/sbin/blkid -o udev -p %N"  
# Get a label if present, otherwise specify one  
ENV{ID_FS_LABEL}!="", ENV{dir_name}="%E{ID_FS_LABEL}"  
ENV{ID_FS_LABEL}=="", ENV{dir_name}="usbhd-%k"  
# Global mount options  
ACTION=="add", ENV{mount_options}="relatime"  
# Filesystem-specific mount options  
ACTION=="add", ENV{ID_FS_TYPE}=="vfat|ntfs", ENV{mount_options}="$env{mount_options},utf8,gid=100,umask=002"  
# Mount the device  
ACTION=="add", RUN+="/bin/mkdir -p /media/%E{dir_name}", RUN+="/bin/mount -o $env{mount_options} /dev/%k /media/%E{dir_name}"  
# Clean up after removal  
ACTION=="remove", ENV{dir_name}!="", RUN+="/bin/umount -l /media/%E{dir_name}", RUN+="/bin/rmdir /media/%E{dir_name}"  
# Exit  
LABEL="media_by_label_auto_mount_end"

33. Add wifi to PI using edimax ew-7811un adaptor
	DISCLAIMER , i used the GUI to configure the network but from what i can tell this is what it did
	
	edit this file

	sudo nano /etc/wpa_supplicant/wpa_supplicant.conf

	and add this to the bottom of the file, save and reboot

	network={
	
		ssid="networkNam"
		psk="networkPassword "
		proto=RSN
		key_mgmt=WPA-PSK
		pairwise=TKIP
		auth_alg=OPEN
	}

34. cloning rpi sd card from osx

	find the name of your sd card using the command
	diskutil list

	in the list find your sd card and find its disk number, ie disk1, or disk2. not the partions ie. disk1s1, disk1s2
	then clone it using the dd tool

	sudo dd if=/dev/yourDiskNumber of=~/Desktop/raspberrypi.dmg(whaterver you prefer)

35. Write cloned image from computer to sd card

	make sure your card is formatted prorperly

	find sd card disk number using 
	diskutil list

	then unmount that disk using the disk number
	diskutil umountDisk /dev/diskNumber

	then burn image to sd card 
	sudo dd bs=1m if=~/Desktop/raspberrypi.dmg(or whatever the name of your image) of=/dev/yourdiskName

	supposedly changing bs (block size) to 32m speeds up the operation

	CTRL-T to see progress

36. Stream video over web

	https://miguelmota.com/blog/raspberry-pi-camera-board-video-streaming/

37. Wireless internet stuff
	
	wifi configuration client
	wpa_cli

	request DHCP license
	sudo dhclient -1 wlan0

38. Enable serial GPIO on RPI

	disable getty on rpi (program that displays login screen)
	in file /etc/inittab, disable : T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100 by adding # in the front

	#T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100

	To prevents the Raspberry Pi from sending out data to the serial ports when it boots, go to file /boot/cmdline.txt and find the line and remove it:

	console=ttyAMA0,115200 kgdboc=ttyAMA0,115200

	reboot the RPi

	install minicom
	sudo apt-get install minicom

	install python lib
	sudo apt-get install python-serial

39. Enable SPI

	remove spi blacklist by adding a # before the spi line in the following file
	sudo nano /etc/modprobe.d/raspi-blacklist.conf

	add “dtparam=spi=on” to the end of your config.txt and reboot.
	sudo nano /boot/config.txt

	then reboot
	sudo reboot

40. installing node
	node-red is stillnot supported by latest node (0.12.x) so you need to install a 0.10.x version
	if you dont need node red then just install the latest node package.  

	To install node 10.36

	 wget http://node-arm.herokuapp.com/node_0.10.36_armhf.deb

	 sudo dpkg -i node_0.10.36_armhf.deb

	once installed you can delete the folder and the .deb installation file it contains

41. install js gpio package

	install node

	npm install onoff

42. confiugre Edimax wifi Adaptor

	Make sure the Raspberry Pi sees the adapter on the USB bus:
		lsusb

	Edit your network interfaces file (e.g. $ sudo nano /etc/network/interfaces), and make it look like the following:

		auto lo
		iface lo inet loopback

		auto eth0
		allow-hotplug eth0
		iface eth0 inet manual

		auto wlan0
		allow-hotplug wlan0
		iface wlan0 inet manual
		wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
		iface default inet dhcp

	sudo nano /etc/wpa_supplicant/wpa_supplicant.conf

		ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
		update_config=1

		network={
		  ssid="YOUR_NETWORK_SSID"
		  psk="YOUR_NETWORK_PASSWORD"
		  key_mgmt=WPA-PSK
		}

	Reload the network interface to see if it connects and picks up an IP address: $ sudo service networking restart (also refresh the network interface to ensure it picks up an IP via DHCP with $ sudo ifdown wlan0 && sudo ifup wlan0).

	"Ensuring the adapter doesn't go into sleep mode
	One of the most annoying things that can happen with a headless wifi-connected computer is the wireless connection dropping, or hanging for 10+ seconds at a time. It seems the Edimax is configured to go into a sleep state after a few seconds of inactivity by default, but this can be disabled pretty easily:"

	Create a configuration file for the adapter: 
		sudo nano /etc/modprobe.d/8192cu.conf
	Add the following two lines to the configuration file and save the file:
		# Disable power management
		options 8192cu rtw_power_mgnt=0 rtw_enusbss=0
	Reboot your Raspberry Pi: 
		sudo reboot

43. Look for usb device

		lsusb

	check for mount point, plug in device and run

		cd /dev/
		ls

	check list, unplug device and see what is missing, thats your device. This is helpful when looking for an arduino

	the arduino is normally something like

		/dev/ttyACM0	

44. Forverjs run node app like a service

	npm install forever -g 			(-g installs globaly)

	forever start service index.js
	forever stop service index.js

45. WIFI keep edimax adaptor from going to sleep

	check that your adaptor is using the 8192cu chipset

		sudo lsmod | grep 8192
		8192cu 551136 0 			-you should see something like this

	You need to then disable the power savings and keep it from going to sleep
	create the file:

		 /etc/modprobe.d/8192cu.conf

	then add this to is and save - probably reboot	 
		
		# prevent power down of wireless when idle
		options 8192cu rtw_power_mgnt=0 rtw_enusbss=0

46. Plain Node install

	http://doctorbin.tumblr.com/post/53991508909/how-to-install-the-latest-version-of-nodejs-npm

		sudo mkdir /opt/node

		wget http://nodejs.org/dist/v0.10.28/node-v0.10.28-linux-arm-pi.tar.gz

		tar xvzf node-v0.10.28-linux-arm-pi.tar.gz

		sudo cp -r node-v0.10.28-linux-arm-pi/* /opt/node

		sudo ln -s /opt/node/bin/node /usr/local/bin/node
		sudo ln -s /opt/node/bin/npm /usr/local/bin/npm

		source ~/.bashrc

		node -v
		npm -v

		
47. start at boot using forever

	https://gauntface.com/blog/2014/08/28/raspberry-pi-3-node

	NB it forget these steps to make it run at boot
	from inside the /etc/init.d/ folder run these scripts

	make it run at boot
	sudo update-rc.d <nameOfScript> defaults

	to stop it from auto running at reboot
	update-rc.d -f <nameOfScript> remove

	and control it with these commands
	sudo service <nameOfScript>  start
	sudo service <nameOfScript> stop
	





