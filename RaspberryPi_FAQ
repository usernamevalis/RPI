Raspberry pi troubeshootin

1. remote host identification changed
	
	rm -f ~/.ssh/known_hosts
	removes known hosts from ssh file

2. configure i2c

	A

	sudo nano /etc/modprobe.d/raspi-blacklist.conf . 
	In this file, there is a comment, and two lines. Add a hash before the I2C line, to comment it out.

	Original:

	# blacklist spi and i2c by default (many users don't need them)

	blacklist spi-bcm2708
	blacklist i2c-bcm2708

	Convert to this:

	# blacklist spi and i2c by default (many users don't need them)

	blacklist spi-bcm2708
	#blacklist i2c-bcm2708

	B

	The next thing to do is add the I2C module to the kernel. Run the command sudo nano /etc/modules .You should see the following file:

	# /etc/modules: kernel modules to load at boot time.
	#
	# This file contains the names of kernel modules that should be loaded
	# at boot time, one per line. Lines beginning with "#" are ignored.
	# Parameters can be specified after the module name.

	snd-bcm2835

	This should have the line i2c-dev added to the end.

	Final file:

	# /etc/modules: kernel modules to load at boot time.
	#
	# This file contains the names of kernel modules that should be loaded
	# at boot time, one per line. Lines beginning with "#" are ignored.
	# Parameters can be specified after the module name.

	snd-bcm2835
	i2c-dev

	C

	There are a few packages that will need installing to use I2C. The first command to run is 
	sudo apt-get install i2c-tools
	If this fails, try running 
	sudo apt-get update 
	and try again

	The other package needed can be installed by running 
	sudo apt-get install python-smbus.

	To configure the software, we will add the Pi user to the I2C access group, by running the command 
	sudo adduser pi i2c.
	Now run 
	sudo reboot to reboot
	, and test the new software.

3. Checking for any devices on th i2c bus

	i2cdetect -y 0 

	or 

	i2cdetect -y 1

4. wget errors about certificates

	wget insertUrl --no-check-certificate

5. list all the currently running processes 

	ps -ef

kill a process

	sudo kill theProcessID

search for a certain process
	
	ps axg | grep partOfNameOfProcess

6. sound issues

	sudo apt-get install alsa-utils
 	sudo modprobe snd_bcm2835
 	sudo aplay /usr/share/sounds/alsa/Front_Center.wav

7. convert av files

	avconv -i inputFile outputFile

8. play audio

	aplay inputFile

9. pifm commands

	sudo ./pifm left_right.wav 103.3 22050 stereo

	# Example command lines
	# play an MP3
	ffmpeg -i input.mp3 -f s16le -ar 22.05k -ac 1 - | sudo ./pifm -106.0

	# Broadcast from a usb microphone (see arecord manual page for config)
	arecord -d0 -c2 -f S16_LE -r 22050 -twav -Dplughw:1,0 copy | sudo ./pifm -106.0

10. copy files over ssh

	# copy from local machine to remote machine
	scp localfile user@host:/path/to/whereyouwant/thefile

	## copy from remote machine to local machine
	scp user@host:/path/to/remotefile localfile

11. check for attached usb devices

	ls /dev/tty*

	arduino normally something like dev/ttyACM0

12. add location to system path variable (works on mac, i assume it will on linux)

	echo 'export PATH=$PATH:/absolute/path/to/directory' >> ~/.bash_profile 

13. manually set date on rpi

	sudo date -s "Jul 5 08:10 2014"

14. crontab

	crontab -l //shows the content of the crontab
	crontab -e //opens up editor to edit the crontab and add/remove jobs

	if you ever get this error when trying to edit crontab with 'crontab -e'
    
    "/tmp/crontab.gfM9rg: Permission denied
    Creation of temporary crontab file failed - aborting"

    then run this
	sudo chmod 1777 /tmp

15. Edit Ntp servers used for time and date settings

	sudo nano /etc/ntp.conf

16. restart Ntp servers

	sudo /etc/init.d/ntp restart

17. Edit time zone

	sudo nano /etc/timezone

18. Internet not working, sharing internet from mac not working

	add this nameserver to the /etc/resolv.conf file

	"nameserver 8.8.8.8"

19. MJPG streamer correct link

	svn co https://svn.code.sf.net/p/mjpg-streamer/code/mjpg-streamer/ mjpg-streamer
	 

20. Find Raspberry Pi's IP usin nmap

	sudo nmap -sn 172.16.21.0/24

	the Ip address needs to be your subnet range, this command scans all ip's within this range from 0-255.
	Sudo needs to be used, this way the command returns the mac addresses which it can identify as a raspberry pi's

21. Installing Node-red

    NBNBNBNBNBNBNB!!!!!!!

    node version 10.28+ do not work on rpi!! so install node -version 10.28 using nvm
    check this site http://sanjo-webdesign.de/2014/08/install-node-js-on-raspberry-pi/

    #!/bin/bash
 
	# 1. Connect to your Raspberry Pi via SSH
	#    or open a terminal.
	 
	# 2. Make sure you have a .bash_profile file:
	touch ~/.bash_profile
	 
	# 3. Install nvm:
	curl https://raw.githubusercontent.com/creationix/nvm/v0.13.1/install.sh | bash
	 
	# 4. Update your shell:
	source ~/.bash_profile
	 
	# 5. Install the latest version of Node.js:
	nvm install 0.10.28
	# Version 0.10.29 and 0.10.30 seems
	# not to work on Raspberry Pi (see [#8062](https://github.com/joyent/node/issues/8062)).
	 
	# 6. Let your shell use
	#    the latest version of Node.js by default:
	nvm alias default 0.10

    the other i did when i finally got this to work, although i ahvent tested it by itself. Is
    I downloaded node red on my laptop and copied over to the RPi using scp. I read somewhere that not all the files download when pullin grom git on RPI - i dunno sounds suspect but i havent tried to replicate.

	enter node-red folder
	cd node-red

	install node modules using npm package manager. nb i had alot of problems when i didnt specify the --production flag
	npm install --production

	useful libraries/nodes. Sometimes i had to install them one by one not as a single command
	sudo npm install ntwitter oauth sentiment wordpos xml2js firmata fs.notify serialport feedparser pushbullet irc simple-xmpp redis mongodb

    to run node red. This limits memeory usage and keeps pi from randonly crashing
    node --max-old-space-size=128 red.js

22. Running NODE_RED on start up

	sudo nano /etc/init.d/node_red

	copy this into the file, and edit the “cd node-red” to point to your installation of node-red

	#! /bin/sh
# Starts and stops Node-RED
# /etc/init.d/node-red
### BEGIN INIT INFO
# Provides:     node-red
# Required-Start:       $syslog
# Required-Stop:        $syslog
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    Node-RED initialisation
### END INIT INFO
# Can be downloaded and installed in one go by using this command
# sudo wget -O /tmp/download https://gist.github.com/bigmonkeyboy/9962293/download && sudo tar -zxf /tmp/download --strip-components 1 -C /etc/init.d && sudo update-rc.d node-red defaults
# Note: this runs as the user called pi
 
PIDFILE=/var/run/nodered.pid
 
#Load up node red when called
case "$1" in
 
start)
        echo "Starting Node-Red.."
        su -l pi -c "cd node-red; screen -dmS red node --max-old-space-size=128 red.’s”
        echo `screen -ls red | sed -n '2p' | cut -f1 -d.` > $PIDFILE
# or
        #nohup node --max-old-space-size=128 red.js > /var/log/node-red.log &
        #echo $! > $PIDFILE
;;
 
stop)
        echo "Stopping Node-Red.."
        su -l pi -c "screen -S red -X quit"
# or
        #kill `cat $PIDFILE`
        rm -f $PIDFILE
;;
 
restart)
        echo "Restarting Node-Red.."
        $0 stop
        $0 start
;;
*)
        echo "Usage: $0 {start|stop|restart}"
        exit 1
esac

	then make it executable
	sudo chmod +x /etc/init.d/node_red

	make it run at boot
	sudo update-rc.d node_red defaults

	to stop it from auto running at reboot
	update-rc.d -f node_red remove

	and control it with these commands
	sudo service node_red start
	sudo service node_red stop
	sudo service node_red restart


23. NPM issues relating to gyp - this is generally rooted to using th latest node version which doesnt work on RPI - use NVM to install node

    remove the tmp folder created by npm in root
    rm -fr /root/tmp

    then install module with
    sudo npm install moduleName --unsafe-perm
    
        or

    sudo npm install moduleName --no-bin-link --unsafe-perm

24. Give RPI a static IP

25. burn wheezy to disk

	diskutil list

	diskutil unmountDisk /dev/<disk# from diskutil>

	sudo dd bs=1m if=2014-09-09-wheezy-raspbian.img of=/dev/disk#

26. run script at boot

	http://www.stuffaboutcode.com/2012/06/raspberry-pi-run-program-at-start-up.html

27. Access OS on sd card from OSX
	See site, it has relavent links to installers: http://pi.gbaman.info/?p=328

	This isnt 100% bug free but works to when you want to access files on the os from you mac

	install Fuse for osx
	when running the installer you must select all 3 options when you get to the  'Installation type' menu (including MacFuse compatability layer)

	once complete install Fuse-ext2 driver then resart you computer and that should work

28. Find and kill a process

	finds all running python programs
    ps aux | grep -i python

    killall insertProgramName

   OR use PID
   finds process ID (pid) of all running python programs
   ps -ef | grep python

   kills process using PID
   kill <PID>

29. UDEV rule to run script when usb is inserted
	nb make script executable, if having probelms place it in /usr/local/bin
	
	Add this to file in the /etc/udev/rules.d/99-myRules.rules
	ACTION=="add", KERNEL=="sd[a-z]1", RUN+="/usr/local/bin/test.sh"

	create bash script test.sh in the right directory containing:
	#!/bin/bash
	echo "test" >> /tmp/test.txt


	dont forget to make the script executable with 
	sudo chmod +x scriptname

	if all is working the /tmp/test.txt file should contain "test". NB access it with sudo  or it might say it does not exist

	reload udev rules right away
	sudo /etc/init.d/udev restart

    see what udev rules are being run
	sudo udevadm test /dev/sda1

	udev rules need to run very quickly, long scripts will get cancelled. 
	to circumvent this you can use 'at'. install it with sudo apt-get install at
	to use it simply pipe the command to 'at' and set to execute 'now'
	eg:
	sudo python script.py | at now

30 writing a bash script

	all bash scripts start with a shebang
	#!/bin/bash

	add commands like you would write them in terminal ie.
	echo "hello"

	to exit script when don running add to the bottom of the script
	exit 0

    make the script executable by running, "+x" makes it executable and accesiable via a program
    sudo chmod +x scriptName

31. run script at insertion of USB

	create udev rule

	sudo nano /etc/udev/rules.d/81-test.rules  (there are rules to the numbers you use but 81 should be fine for most)
	(add this to the above file and save)
	ACTION=="add", KERNEL=="sd[a-z]1", RUN+="/home/pi/testPy.sh"

	this runs the file /home/pi/testPy.sh whenever a flashdisk is inserted

	create the bash script

	sudo nano testPy.sh
	(add this to file)
	#!/bin/bash
	echo "test" >> /tmp/test.txt
	echo /home/pi/test.py | /usr/bin/at now

	this adds "fuck" to a file at /tmp/test.txt, usefule for debugging, and then runs test.py. do to limited time avaialble
	to runs script from udev you need to pass off the python or else it will stop halfway through execution. This is don using 'at', at 
	is kind of like cron, the shell script calls the python script and passes it to 'at' to be exectued in peace and at its own pace

	Make the shell script executble
	sudo chmod u+x testPy.sh

	Whenever a usb is inserted the udev rule will call the shell script etc. to double check, look at the contents of /tmp/test.txt you should see 'test'. See below for a helpful debugging script to place inside the python script

	sudo nano test.py
	(add this code and make executable)
	#!/usr/bin/python2
	import os

	if __name__ == "__main__":
    f = file("/tmp/hello.txt", "a")
    f.write(str(os.environ))
    f.close()

    sudo nano chmod u+x test.py

    when the usb is inserted you should see 'test' added to /tmp/test.txt, as well as this sort of thing added to /tmp/hello.txt
    "{'ID_VENDOR_ID': '058f', 'ID_PART_TABLE_TYPE': 'dos', 'ID_USB_INTERFACE_NUM': '00', 'ID_PART_ENTRY_DISK': '8:0', 'ID_REVISION': '8.07', 'UDISKS_PARTITION_SCH"...etc

























